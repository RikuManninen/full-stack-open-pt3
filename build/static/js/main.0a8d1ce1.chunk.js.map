{"version":3,"sources":["components/Search.js","components/PersonForm.js","components/Person.js","components/Persons.js","services/persons.js","components/Notification.js","App.js","index.js"],"names":["Search","value","handler","onChange","PersonForm","action","nameValue","nameHandler","numberValue","numberHandler","onSubmit","type","Person","person","remove","name","number","onClick","Persons","persons","map","baseUrl","exported","getAll","axios","get","create","newObject","post","update","id","put","delete","Notification","message","className","content","App","useState","setPersons","newName","setNewName","newNumber","setNewNumber","searchWord","setSearchWord","setMessage","useEffect","personService","then","response","data","personsToShow","filter","p","toLowerCase","includes","clearFields","msg","obj","setTimeout","updatePerson","catch","error","event","target","preventDefault","some","window","confirm","concat","newArray","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0a8d1ce1.chunk.js","sourcesContent":["import React from \"react\"\n\nconst Search = ({value, handler}) => {\n  return (\n    <div>\n      filter shown with <input \n        value={value}\n        onChange={handler} \n      />\n    </div>\n  )\n}\n\nexport default Search","import React from \"react\"\n\nconst PersonForm = ({action, nameValue, nameHandler, numberValue, numberHandler}) => {\n  return (\n    <form onSubmit={action}>\n      <div>\n        name: <input \n          value={nameValue}\n          onChange={nameHandler} \n        />\n      </div>\n      <div>\n        number: <input \n          value={numberValue}\n          onChange={numberHandler} \n        />\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  )\n}\n\nexport default PersonForm","import React from \"react\";\n\nconst Person = ({person, remove}) => {\n  return <p>{person.name} {person.number} <button onClick={() => remove(person)}>delete</button></p>\n}\n\nexport default Person","import React from \"react\";\nimport Person from \"./Person\";\n\nconst Persons = ({persons, remove}) => {\n  return persons.map(person => <Person key={person.name} person={person} remove={remove} />)\n}\n\nexport default Persons","import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  return axios.get(baseUrl)\n}\n\nconst create = newObject => {\n  return axios.post(baseUrl, newObject)\n}\n\nconst update = (id, newObject) => {\n  return axios.put(`${baseUrl}/${id}`, newObject)\n}\n\nconst remove = id => {\n  return axios.delete(`${baseUrl}/${id}`)\n}\n\nconst exported = {\n  getAll,\n  create,\n  update,\n  remove\n};\n\nexport default exported;","import react from \"react\"\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className={`notification ${message.type}`}>\n      {message.content}\n    </div>\n  )\n}\n\nexport default Notification","import React, { useEffect, useState } from 'react'\nimport Search from './components/Search'\nimport PersonForm from './components/PersonForm'\nimport Persons from './components/Persons'\nimport personService from './services/persons'\nimport Notification from './components/Notification'\n\nconst App = () => {\n\n  const [ persons, setPersons] = useState([])\n\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ searchWord, setSearchWord ] = useState('')\n  const [ message, setMessage ] = useState(null)\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(response => setPersons(response.data))\n  }, [])\n\n  const personsToShow = searchWord\n  ? persons.filter(p => p.name.toLowerCase().includes(searchWord.toLowerCase()))\n  : persons\n\n  const clearFields = () => {\n    setNewName('')\n    setNewNumber('')\n  }\n\n  const msg = (obj) => {\n    setMessage(obj)\n    setTimeout(() => setMessage(null), 5000)\n  }\n\n  const addPerson = (event) => {\n    event.preventDefault()\n    if(persons.some(p => p.name === newName)) {\n      const person = persons.filter(p => p.name === newName)[0]\n      window.confirm(`${person.name} is already added to phonebook, replase the old number with new one?`) &&\n      updatePerson(person)\n    }\n    else {\n      const obj = {\n        name: newName,\n        number: newNumber\n      }\n      personService\n        .create(obj)\n        .then(response => {\n          msg({\n            type: 'success',\n            content: `Added ${response.data.name}`\n          })\n          setPersons(persons.concat(response.data))\n          clearFields()\n        })\n        .catch(error => {\n          msg({\n            type: 'error',\n            content: error.response.data.error\n          })\n        })\n    }\n  }\n\n  const updatePerson = (person) => {\n    personService\n      .update(person.id, { ...person, number: newNumber })\n      .then(response => {\n        msg({\n          type: 'success',\n          content: `Updated ${response.data.name}`\n        })\n        setPersons(persons.map(p => p.id !== person.id ? p : response.data))\n        clearFields()\n      })\n      .catch(error => {\n        msg({\n          type: 'error',\n          content: `Information of ${person.name} has already been removed from server`\n        })\n      })\n  }\n  \n  const removePerson = (person) => {\n    const newArray = persons.filter(p => p.id !== person.id)\n    window.confirm(`Delete ${person.name} ?`) && \n    personService\n      .remove(person.id)\n      .then(() => {\n        msg({\n          type: 'success',\n          content: `Deleted ${person.name}`\n        })\n        setPersons(newArray)\n      })\n  }\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleSearchChange = (event) => {\n    setSearchWord(event.target.value)\n  }\n\n  return (\n    <div>\n      <Notification message={message}/>\n      <h2>Phonebook</h2>\n        <Search value={searchWord} handler={handleSearchChange}/>\n      <h2>add new</h2>\n        <PersonForm action={addPerson} nameValue={newName} nameHandler={handleNameChange} numberValue={newNumber} numberHandler={handleNumberChange}/>\n      <h2>Numbers</h2>\n        <Persons persons={personsToShow} remove={removePerson} />\n    </div>\n  )\n\n}\n\nexport default App","import ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n  <App />, \n  document.getElementById('root')\n)"],"sourceRoot":""}